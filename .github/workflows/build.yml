name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev playwright @playwright/test
        
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
      
    - name: Create test file
      run: |
        cat > test.spec.js << 'EOF'
        const { test, expect } = require('@playwright/test');
        const path = require('path');
        
        test.describe('Countdown Clock App', () => {
          test.beforeEach(async ({ page }) => {
            const filePath = 'file://' + path.resolve('./index.html');
            await page.goto(filePath);
          });
        
          test('should load the page with countdown clock', async ({ page }) => {
            // Check if the title is correct
            await expect(page).toHaveTitle('Countdown Clock App');
            
            // Check if main elements are present
            await expect(page.locator('h1')).toContainText('Countdown Clock');
            await expect(page.locator('#countdown')).toBeVisible();
            await expect(page.locator('#clickButton')).toBeVisible();
            
            // Check if button is initially disabled
            await expect(page.locator('#clickButton')).toBeDisabled();
          });
        
          test('should have working countdown timer', async ({ page }) => {
            // Wait a moment and check if countdown is updating
            const initialTime = await page.locator('#countdown').textContent();
            await page.waitForTimeout(2000);
            const updatedTime = await page.locator('#countdown').textContent();
            
            // The time should have changed (decreased)
            expect(initialTime).not.toBe(updatedTime);
          });
        
          test('should enable button when countdown finishes', async ({ page }) => {
            // Speed up the test by modifying the countdown time
            await page.evaluate(() => {
              window.countdownApp.timeLeft = 2; // Set to 2 seconds for testing
            });
            
            // Wait for countdown to finish
            await page.waitForTimeout(3000);
            
            // Check if button is enabled
            await expect(page.locator('#clickButton')).toBeEnabled();
            
            // Check if countdown shows 00:00
            await expect(page.locator('#countdown')).toContainText('00:00');
          });
        
          test('should show winner popup when button clicked after countdown', async ({ page }) => {
            // Speed up the test
            await page.evaluate(() => {
              window.countdownApp.timeLeft = 1;
            });
            
            // Wait for countdown to finish
            await page.waitForTimeout(2000);
            
            // Click the button
            await page.locator('#clickButton').click();
            
            // Check if popup is visible
            await expect(page.locator('#popup')).toHaveClass(/show/);
            await expect(page.locator('#popup h2')).toContainText('You are the winner!');
          });
        
          test('should close popup when close button is clicked', async ({ page }) => {
            // Speed up the test
            await page.evaluate(() => {
              window.countdownApp.timeLeft = 1;
            });
            
            // Wait for countdown to finish and click button
            await page.waitForTimeout(2000);
            await page.locator('#clickButton').click();
            
            // Close popup
            await page.locator('#closePopup').click();
            
            // Check if popup is hidden
            await expect(page.locator('#popup')).not.toHaveClass(/show/);
          });
        
          test('should not show popup if button clicked before countdown ends', async ({ page }) => {
            // Try to click button while it's disabled (should not work)
            await page.locator('#clickButton').click({ force: true });
            
            // Popup should not be visible
            await expect(page.locator('#popup')).not.toHaveClass(/show/);
          });
        });
        EOF
        
    - name: Create Playwright config
      run: |
        cat > playwright.config.js << 'EOF'
        module.exports = {
          testDir: '.',
          testMatch: '**/*.spec.js',
          timeout: 30000,
          use: {
            headless: true,
            viewport: { width: 1280, height: 720 },
          },
          projects: [
            {
              name: 'chromium',
              use: { ...require('@playwright/test').devices['Desktop Chrome'] },
            },
          ],
        };
        EOF
        
    - name: Run tests
      run: npx playwright test
      
    - name: Validate HTML
      run: |
        # Simple HTML validation - check for basic structure
        if ! grep -q "<!DOCTYPE html>" index.html; then
          echo "Error: Missing DOCTYPE declaration"
          exit 1
        fi
        
        if ! grep -q "<title>" index.html; then
          echo "Error: Missing title tag"
          exit 1
        fi
        
        if ! grep -q "script.js" index.html; then
          echo "Error: Missing script.js reference"
          exit 1
        fi
        
        if ! grep -q "style.css" index.html; then
          echo "Error: Missing style.css reference"
          exit 1
        fi
        
        echo "HTML validation passed"
        
    - name: Check JavaScript syntax
      run: |
        node -c script.js
        echo "JavaScript syntax check passed"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4